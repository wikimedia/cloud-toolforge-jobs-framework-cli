.\" (C) Copyright 2023 Arturo Borrero Gonzalez <aborrero@wikimedia.org>
.\"
.TH TOOLFORGE-JOBS-FRAMEWORK 1 "June 7 2023"
.\" Please adjust this date whenever revising the manpage.
.\"
.SH NAME
toolforge-jobs-framework-cli \- command line interface for the Toolforge Jobs Framework
.SH SYNOPSIS
.B toolforge-jobs [options] {images,run,show,list,delete,flush,load,restart,quota} ...
.SH DESCRIPTION
The \fBtoolforge-jobs\fP command line interface allows you to interact with the \fBToolforge
Jobs Framework\fP.

This framework allows you to manage jobs that run in the \fBWikimedia Toolforge\fP platform.

In general there are 3 kind of jobs:
.TP
.B normal
Jobs that are initiated by the user, and are expected to run until the job's internal execution
normally finishes.
.TP
.B schedule
Jobs that once created by the user, are periodically launched at a given time by the framework.
Similar to a cronjob.
.TP
.B continuous
Jobs that once created by the user are expected to be always up and running (for example, a daemon).

.SH ACTIONS
Top level actions that the command supports:

.TP
.B images
List information on available non-deprecated container image types for the \fBToolforge Jobs Framework\fP.
To be used in the \fBrun\fP command \fB--image\fP parameter.

Occasionally some images are deprecated by the Toolforge admins. In that case existing jobs will continue
working and new jobs can be created, but the images will not be visible on the image listing.

Example:

.nf
$ toolforge-jobs images
+------------+------------------------------------------------------------------------+
| Short name |                          Container image URL                           |
+------------+------------------------------------------------------------------------+
|  bullseye  |    docker-registry.tools.wmflabs.org/toolforge-bullseye-sssd:latest    |
| golang1.11 | docker-registry.tools.wmflabs.org/toolforge-golang111-sssd-base:latest |
|   jdk17    |   docker-registry.tools.wmflabs.org/toolforge-jdk17-sssd-base:latest   |
|  mono6.8   |  docker-registry.tools.wmflabs.org/toolforge-mono68-sssd-base:latest   |
|   node16   |  docker-registry.tools.wmflabs.org/toolforge-node16-sssd-base:latest   |
|  perl5.32  |  docker-registry.tools.wmflabs.org/toolforge-perl532-sssd-base:latest  |
|   php7.4   |   docker-registry.tools.wmflabs.org/toolforge-php74-sssd-base:latest   |
| python3.9  | docker-registry.tools.wmflabs.org/toolforge-python39-sssd-base:latest  |
|  ruby2.1   |  docker-registry.tools.wmflabs.org/toolforge-ruby21-sssd-base:latest   |
|  ruby2.7   |  docker-registry.tools.wmflabs.org/toolforge-ruby27-sssd-base:latest   |
|   tcl8.6   |   docker-registry.tools.wmflabs.org/toolforge-tcl86-sssd-base:latest   |
+------------+------------------------------------------------------------------------+
.fi

.TP
.B run NAME --command COMMAND --image IMAGE --no-filelog --mem MEM --cpu CPU [--schedule SCHEDULE | --continuous | --wait] --retry
Run a new job of your own in Toolforge. Action specific parameters:

.nf
NAME                    New job name, unique identifier. Example: "myjob"
--command COMMAND       The command to run in the job. Example: "./mycommand.sh argone --argtwo"
--image IMAGE           Container image shortname. Check them with the \fBimages\fP action. Example: "bullseye".
--no-filelog            Disable log storage in files in the tool home directory.
-o, --filelog-stdout    Specify the path to store output logs
-e, --filelog-stderr    Specify the path to store error logs
--mem MEM               Request additional memory resource limits for the job.
--cpu CPU               Request additional CPU resource limits for the job
--emails OPT            Specify if you want to receive emails about events for this job. Choices are 'none', 'all', 'onfailure', 'onfinish'. The default is 'none'.

--schedule SCHEDULE     If the job is a schedule, cron time specification. Example: "1 * * * *".
--continuous            Run a continuous job.
--wait                  Run a normal job and wait for completition.
--retry                 Number of times to retry a failed job. This doesn't have any effect when --continuous is set. (range from 0 to 5)
.fi

Some complete examples:

.nf
Running a normal job:
$ toolforge-jobs run myjob --command ./mycommand.sh --image bullseye

Running a normal job and waiting for it to complete:
$ toolforge-jobs run myotherjob --command ./myothercommand.sh --image bullseye --wait

Running a continuous job:
$ toolforge-jobs run myalwaysrunningjob --command ./myendlesscommand.sh --image bullseye --continuous

Running a scheduled job:
$ toolforge-jobs run mycronjob --command ./everyminute.sh --image bullseye --schedule "1 * * * *"

Running a scheduled job with --retry policy set:
$ toolforge-jobs run mycronjob --command ./everyminute.sh --image bullseye --schedule "1 * * * *" --retry

Running a normal job without logs being stored:
$ toolforge-jobs run myjob --command ./mycommand.sh --image bullseye --no-filelog --emails none

Running a normal job with custom log files:
$ toolforge-jobs run myjob --command ./mycommand.sh --image bullseye --emails none -o ./log-file.out -e ./log-file.err

Running a normal job with both output and error logs stored in same file:
$ toolforge-jobs run myjob --command ./mycommand.sh --image bullseye --emails none --filelog-stdout ./log-file.txt --filelog-stderr ./log-file.txt

Running a job with command arguments:
$ toolforge-jobs run myjob --command "./mycommand.sh --witharguments" --image bullseye --emails all

Running a job requesting additional CPU and memory:
$ toolforge-jobs run myjob --command "./heavycommand.sh" --image bullseye --mem 1Gi --cpu 10
.fi

.TP
.B show NAME
Show details of a job of your own in Toolforge.

Example:

.nf
$ toolforge-jobs show myscheduledjob
+------------+-----------------------------------------------------------------+
| Job name:  | myscheduledjob                                                  |
+------------+-----------------------------------------------------------------+
| Command:   | ./read-dumps.sh myargument                                      |
+------------+-----------------------------------------------------------------+
| Job type:  | schedule: * * * * *                                             |
+------------+-----------------------------------------------------------------+
| Container: | bullseye                                                        |
+------------+-----------------------------------------------------------------+
| File log:  | yes                                                             |
+------------+-----------------------------------------------------------------+
| Output log:| /data/project/my-user/myscheduledjob.out                        |
+------------+-----------------------------------------------------------------+
| Error log: | /data/project/my-user/myscheduledjob.err                        |
+------------+-----------------------------------------------------------------+
| Emails:    | none                                                            |
+------------+-----------------------------------------------------------------+
| Resources: | mem: 10Mi, cpu: 100                                             |
+------------+-----------------------------------------------------------------+
| Retry:     | yes: 3 time(s)                                                  |
+------------+-----------------------------------------------------------------+
| Status:    | Last schedule time: 2021-06-30T10:26:00Z                        |
+------------+-----------------------------------------------------------------+
| Hints:     | Last run at 2021-06-30T10:26:08Z. Pod in 'Pending' phase. State |
|            | 'waiting' for reason 'ContainerCreating'.                       |
+------------+-----------------------------------------------------------------+
.fi

.TP
.B list [-o|--output {normal,long}]
List all running jobs of your own in Toolforge.

The \fB-o\fP (or \fB--output\fP) parameter indicates how much detail is displayed.

Example, short listing:

.nf
$ toolforge-jobs list
Job name:       Job type:            Status:
--------------  -------------------  ---------------------------
myscheduledjob  schedule: * * * * *  Last schedule time: 2021-06-30T10:26:00Z
alwaysrunning   continuous           Running
myjob           normal               Completed
.fi

Example, long listing:

.nf
$ toolforge-jobs list -o long
Job name:       Command:                 Job type:            Container:           File log:  Output log:                               Error log:                                Emails:   Resources:  Retry:           Status:
--------------  -----------------------  -------------------  -------------------  ---------  ----------------------------------------  ----------------------------------------  -------   ----------  --------------   ----------------------------------------
myscheduledjob  ./read-dumps.sh          schedule: * * * * *  bullseye              yes       /data/project/my-user/myscheduledjob.out  /data/project/my-user/myscheduledjob.err  none      default     yes: 5 time(s)   Last schedule time: 2021-06-30T10:26:00Z
alwaysrunning   ./myendlesscommand.sh    continuous           bullseye              no        /dev/null                                 /dev/null                                 all       default     no               Running
myjob           ./mycommand.sh --debug   normal               buster (deprecated)   yes       /data/project/my-user/custom.out          /data/project/my-user/custom.err          onfinish  default     yes: 1 time(s)   Completed
.fi

.TP
.B delete NAME
Delete a running job of your own in Toolforge.
.TP
.B flush
Delete all running jobs of your own in Toolforge.
.TP
.B load FILE
Flush all jobs (similar to \fBflush\fP action) and read a YAML file with job specifications to be
loaded and run all at once.

Loading new jobs will stop if failures are found.

The file format mirrors arguments to the \fBrun\fP action.

Example YAML file:

.nf
---
# a cronjob
- name: everyminute
  command: ./myothercommand.py -v
  image: bullseye
  no-filelog: true
  schedule: "* * * * *"
  retry: 5
  emails: onfailure
# a continuous job
- image: bullseye
  name: endlessjob
  command: ./dumps-daemon.py --endless
  filelog-stdout: /data/project/user/custom.out
  filelog-stderr: /data/project/user/custom.err
  continuous: true
  emails: all
# wait for this normal job before loading the next
- name: myjob
  image: bullseye
  command: ./mycommand.sh --argument1
  filelog-stdout: /data/project/user/custom.log
  filelog-stderr: /data/project/user/custom.log
  retry: 2
  wait: true
  emails: onfinish
# another normal job after the previous one finished running
- name: anotherjob
  image: bullseye
  command: ./mycommand.sh --argument1
  emails: none
.fi

Alternatively, the \fB--job NAME\fP parameter can be used to load (and delete the old one, if it
exists) a single job only.
.TP
.B restart NAME
Restarts a currently running job. Only continuous and cron jobs are supported.

.TP
.B quota
Displays quota information for the current tool.

.SH OPTIONS
Normal users wont need any of these options, which are mostly for Toolforge administrators, and
only documented here for completeness.
.TP
.B \-h, \-\-help
Show summary of options.
.TP
.B \-\-debug
Activate debug mode.


.SH SEE ALSO
.nf
* https://wikitech.wikimedia.org/wiki/Portal:Toolforge
* https://wikitech.wikimedia.org/wiki/Help:Toolforge/Jobs_framework
* https://jobs.toolforge.org/
.fi

.SH AUTHOR
\fBWikimedia Toolforge\fP is a service provided by the \fBWikimedia Foundation Cloud Services\fP team.

The \fBToolforge Job Framework\fP was initially designed and written by
\fBArturo Borrero Gonzalez\fP.
